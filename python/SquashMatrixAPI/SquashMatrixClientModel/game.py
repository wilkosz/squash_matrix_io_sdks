# coding: utf-8

"""
    Squash Matrix API

    # Endeavor The squash matrix API enables clubs, players, and regions to own their information, with results being updated weekly. The API information sits ontop of squash matrix australia website [https://squashmatrix.com](https://squashmatrix.com) # API Aside from the documentation provided below, there is also a `{json:api}` available and can be accessed in the same manner, with the addition of the accept header `{accept: application/vnd.api+json}`. More information about json api can be viewed on their website at [http://jsonapi.org/](http://jsonapi.org/) # Squash Matrix Scrapper There is a ruby SDK for retrieving information from [https://squashmatrix.com](https://squashmatrix.com) which can be found at https://rubygems.org/gems/squash_matrix # SDK's Please stay posted! Client sdk's for the following will be provided shortly:    - Javascript   - Java   - Ruby  # Blog Find relevent and interesting media on [wilkosz.com.au](http://wilkosz.com.au) # Contact Join this endeavor and be appart of the community [https://www.facebook.com/squashmatrixapi](https://www.facebook.com/squashmatrixapi) <hr />  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Game(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'date': 'date',
        'division': 'str',
        'event': 'str',
        'round': 'str',
        'position': 'str',
        'player_a_name': 'str',
        'player_b_name': 'str',
        'player_a_id': 'int',
        'player_b_id': 'int',
        'player_a_points': 'int',
        'player_b_points': 'int',
        'player_a_games': 'int',
        'player_b_games': 'int',
        'player_a_rating': 'float',
        'player_b_rating': 'float',
        'player_a_rating_adjustment': 'float',
        'player_b_rating_adjustment': 'float',
        'match_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'date': 'date',
        'division': 'division',
        'event': 'event',
        'round': 'round',
        'position': 'position',
        'player_a_name': 'player_a_name',
        'player_b_name': 'player_b_name',
        'player_a_id': 'player_a_id',
        'player_b_id': 'player_b_id',
        'player_a_points': 'player_a_points',
        'player_b_points': 'player_b_points',
        'player_a_games': 'player_a_games',
        'player_b_games': 'player_b_games',
        'player_a_rating': 'player_a_rating',
        'player_b_rating': 'player_b_rating',
        'player_a_rating_adjustment': 'player_a_rating_adjustment',
        'player_b_rating_adjustment': 'player_b_rating_adjustment',
        'match_id': 'match_id'
    }

    def __init__(self, id=None, date=None, division=None, event=None, round=None, position=None, player_a_name=None, player_b_name=None, player_a_id=None, player_b_id=None, player_a_points=None, player_b_points=None, player_a_games=None, player_b_games=None, player_a_rating=None, player_b_rating=None, player_a_rating_adjustment=None, player_b_rating_adjustment=None, match_id=None):  # noqa: E501
        """Game - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._date = None
        self._division = None
        self._event = None
        self._round = None
        self._position = None
        self._player_a_name = None
        self._player_b_name = None
        self._player_a_id = None
        self._player_b_id = None
        self._player_a_points = None
        self._player_b_points = None
        self._player_a_games = None
        self._player_b_games = None
        self._player_a_rating = None
        self._player_b_rating = None
        self._player_a_rating_adjustment = None
        self._player_b_rating_adjustment = None
        self._match_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if date is not None:
            self.date = date
        if division is not None:
            self.division = division
        if event is not None:
            self.event = event
        if round is not None:
            self.round = round
        if position is not None:
            self.position = position
        if player_a_name is not None:
            self.player_a_name = player_a_name
        if player_b_name is not None:
            self.player_b_name = player_b_name
        if player_a_id is not None:
            self.player_a_id = player_a_id
        if player_b_id is not None:
            self.player_b_id = player_b_id
        if player_a_points is not None:
            self.player_a_points = player_a_points
        if player_b_points is not None:
            self.player_b_points = player_b_points
        if player_a_games is not None:
            self.player_a_games = player_a_games
        if player_b_games is not None:
            self.player_b_games = player_b_games
        if player_a_rating is not None:
            self.player_a_rating = player_a_rating
        if player_b_rating is not None:
            self.player_b_rating = player_b_rating
        if player_a_rating_adjustment is not None:
            self.player_a_rating_adjustment = player_a_rating_adjustment
        if player_b_rating_adjustment is not None:
            self.player_b_rating_adjustment = player_b_rating_adjustment
        if match_id is not None:
            self.match_id = match_id

    @property
    def id(self):
        """Gets the id of this Game.  # noqa: E501


        :return: The id of this Game.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Game.


        :param id: The id of this Game.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def date(self):
        """Gets the date of this Game.  # noqa: E501


        :return: The date of this Game.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Game.


        :param date: The date of this Game.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def division(self):
        """Gets the division of this Game.  # noqa: E501


        :return: The division of this Game.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this Game.


        :param division: The division of this Game.  # noqa: E501
        :type: str
        """

        self._division = division

    @property
    def event(self):
        """Gets the event of this Game.  # noqa: E501


        :return: The event of this Game.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Game.


        :param event: The event of this Game.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def round(self):
        """Gets the round of this Game.  # noqa: E501


        :return: The round of this Game.  # noqa: E501
        :rtype: str
        """
        return self._round

    @round.setter
    def round(self, round):
        """Sets the round of this Game.


        :param round: The round of this Game.  # noqa: E501
        :type: str
        """

        self._round = round

    @property
    def position(self):
        """Gets the position of this Game.  # noqa: E501


        :return: The position of this Game.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Game.


        :param position: The position of this Game.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def player_a_name(self):
        """Gets the player_a_name of this Game.  # noqa: E501


        :return: The player_a_name of this Game.  # noqa: E501
        :rtype: str
        """
        return self._player_a_name

    @player_a_name.setter
    def player_a_name(self, player_a_name):
        """Sets the player_a_name of this Game.


        :param player_a_name: The player_a_name of this Game.  # noqa: E501
        :type: str
        """

        self._player_a_name = player_a_name

    @property
    def player_b_name(self):
        """Gets the player_b_name of this Game.  # noqa: E501


        :return: The player_b_name of this Game.  # noqa: E501
        :rtype: str
        """
        return self._player_b_name

    @player_b_name.setter
    def player_b_name(self, player_b_name):
        """Sets the player_b_name of this Game.


        :param player_b_name: The player_b_name of this Game.  # noqa: E501
        :type: str
        """

        self._player_b_name = player_b_name

    @property
    def player_a_id(self):
        """Gets the player_a_id of this Game.  # noqa: E501

        Player association  # noqa: E501

        :return: The player_a_id of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_a_id

    @player_a_id.setter
    def player_a_id(self, player_a_id):
        """Sets the player_a_id of this Game.

        Player association  # noqa: E501

        :param player_a_id: The player_a_id of this Game.  # noqa: E501
        :type: int
        """

        self._player_a_id = player_a_id

    @property
    def player_b_id(self):
        """Gets the player_b_id of this Game.  # noqa: E501

        Player association  # noqa: E501

        :return: The player_b_id of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_b_id

    @player_b_id.setter
    def player_b_id(self, player_b_id):
        """Sets the player_b_id of this Game.

        Player association  # noqa: E501

        :param player_b_id: The player_b_id of this Game.  # noqa: E501
        :type: int
        """

        self._player_b_id = player_b_id

    @property
    def player_a_points(self):
        """Gets the player_a_points of this Game.  # noqa: E501


        :return: The player_a_points of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_a_points

    @player_a_points.setter
    def player_a_points(self, player_a_points):
        """Sets the player_a_points of this Game.


        :param player_a_points: The player_a_points of this Game.  # noqa: E501
        :type: int
        """

        self._player_a_points = player_a_points

    @property
    def player_b_points(self):
        """Gets the player_b_points of this Game.  # noqa: E501


        :return: The player_b_points of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_b_points

    @player_b_points.setter
    def player_b_points(self, player_b_points):
        """Sets the player_b_points of this Game.


        :param player_b_points: The player_b_points of this Game.  # noqa: E501
        :type: int
        """

        self._player_b_points = player_b_points

    @property
    def player_a_games(self):
        """Gets the player_a_games of this Game.  # noqa: E501


        :return: The player_a_games of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_a_games

    @player_a_games.setter
    def player_a_games(self, player_a_games):
        """Sets the player_a_games of this Game.


        :param player_a_games: The player_a_games of this Game.  # noqa: E501
        :type: int
        """

        self._player_a_games = player_a_games

    @property
    def player_b_games(self):
        """Gets the player_b_games of this Game.  # noqa: E501


        :return: The player_b_games of this Game.  # noqa: E501
        :rtype: int
        """
        return self._player_b_games

    @player_b_games.setter
    def player_b_games(self, player_b_games):
        """Sets the player_b_games of this Game.


        :param player_b_games: The player_b_games of this Game.  # noqa: E501
        :type: int
        """

        self._player_b_games = player_b_games

    @property
    def player_a_rating(self):
        """Gets the player_a_rating of this Game.  # noqa: E501


        :return: The player_a_rating of this Game.  # noqa: E501
        :rtype: float
        """
        return self._player_a_rating

    @player_a_rating.setter
    def player_a_rating(self, player_a_rating):
        """Sets the player_a_rating of this Game.


        :param player_a_rating: The player_a_rating of this Game.  # noqa: E501
        :type: float
        """

        self._player_a_rating = player_a_rating

    @property
    def player_b_rating(self):
        """Gets the player_b_rating of this Game.  # noqa: E501


        :return: The player_b_rating of this Game.  # noqa: E501
        :rtype: float
        """
        return self._player_b_rating

    @player_b_rating.setter
    def player_b_rating(self, player_b_rating):
        """Sets the player_b_rating of this Game.


        :param player_b_rating: The player_b_rating of this Game.  # noqa: E501
        :type: float
        """

        self._player_b_rating = player_b_rating

    @property
    def player_a_rating_adjustment(self):
        """Gets the player_a_rating_adjustment of this Game.  # noqa: E501


        :return: The player_a_rating_adjustment of this Game.  # noqa: E501
        :rtype: float
        """
        return self._player_a_rating_adjustment

    @player_a_rating_adjustment.setter
    def player_a_rating_adjustment(self, player_a_rating_adjustment):
        """Sets the player_a_rating_adjustment of this Game.


        :param player_a_rating_adjustment: The player_a_rating_adjustment of this Game.  # noqa: E501
        :type: float
        """

        self._player_a_rating_adjustment = player_a_rating_adjustment

    @property
    def player_b_rating_adjustment(self):
        """Gets the player_b_rating_adjustment of this Game.  # noqa: E501


        :return: The player_b_rating_adjustment of this Game.  # noqa: E501
        :rtype: float
        """
        return self._player_b_rating_adjustment

    @player_b_rating_adjustment.setter
    def player_b_rating_adjustment(self, player_b_rating_adjustment):
        """Sets the player_b_rating_adjustment of this Game.


        :param player_b_rating_adjustment: The player_b_rating_adjustment of this Game.  # noqa: E501
        :type: float
        """

        self._player_b_rating_adjustment = player_b_rating_adjustment

    @property
    def match_id(self):
        """Gets the match_id of this Game.  # noqa: E501

        Squash Matrix mathch id  # noqa: E501

        :return: The match_id of this Game.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this Game.

        Squash Matrix mathch id  # noqa: E501

        :param match_id: The match_id of this Game.  # noqa: E501
        :type: int
        """

        self._match_id = match_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Game):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
