/* 
 * Sqaush Matrix API
 *
 * v1 documentation
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Game
    /// </summary>
    [DataContract]
    public partial class Game :  IEquatable<Game>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Game() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Date">Date (required).</param>
        /// <param name="Devision">Devision.</param>
        /// <param name="_Event">_Event (required).</param>
        /// <param name="Round">Round (required).</param>
        /// <param name="Position">Position (required).</param>
        /// <param name="PlayerAPoints">PlayerAPoints (required).</param>
        /// <param name="PlayerBPoints">PlayerBPoints (required).</param>
        /// <param name="PlayerAGames">PlayerAGames (required).</param>
        /// <param name="PlayerBGames">PlayerBGames (required).</param>
        /// <param name="PlayerARating">PlayerARating (required).</param>
        /// <param name="PlayerBRating">PlayerBRating (required).</param>
        /// <param name="PlayerARatingAdjustment">PlayerARatingAdjustment.</param>
        /// <param name="PlayerBRatingAdjustment">PlayerBRatingAdjustment.</param>
        /// <param name="MatchId">MatchId (required).</param>
        /// <param name="PlayerA">PlayerA (required).</param>
        /// <param name="PlayerB">PlayerB (required).</param>
        public Game(long? Id = default(long?), DateTime? Date = default(DateTime?), string Devision = default(string), string _Event = default(string), string Round = default(string), string Position = default(string), int? PlayerAPoints = default(int?), int? PlayerBPoints = default(int?), int? PlayerAGames = default(int?), int? PlayerBGames = default(int?), double? PlayerARating = default(double?), double? PlayerBRating = default(double?), double? PlayerARatingAdjustment = default(double?), double? PlayerBRatingAdjustment = default(double?), int? MatchId = default(int?), Player PlayerA = default(Player), Player PlayerB = default(Player))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Game and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for Game and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "_Event" is required (not null)
            if (_Event == null)
            {
                throw new InvalidDataException("_Event is a required property for Game and cannot be null");
            }
            else
            {
                this._Event = _Event;
            }
            // to ensure "Round" is required (not null)
            if (Round == null)
            {
                throw new InvalidDataException("Round is a required property for Game and cannot be null");
            }
            else
            {
                this.Round = Round;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for Game and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
            // to ensure "PlayerAPoints" is required (not null)
            if (PlayerAPoints == null)
            {
                throw new InvalidDataException("PlayerAPoints is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerAPoints = PlayerAPoints;
            }
            // to ensure "PlayerBPoints" is required (not null)
            if (PlayerBPoints == null)
            {
                throw new InvalidDataException("PlayerBPoints is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerBPoints = PlayerBPoints;
            }
            // to ensure "PlayerAGames" is required (not null)
            if (PlayerAGames == null)
            {
                throw new InvalidDataException("PlayerAGames is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerAGames = PlayerAGames;
            }
            // to ensure "PlayerBGames" is required (not null)
            if (PlayerBGames == null)
            {
                throw new InvalidDataException("PlayerBGames is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerBGames = PlayerBGames;
            }
            // to ensure "PlayerARating" is required (not null)
            if (PlayerARating == null)
            {
                throw new InvalidDataException("PlayerARating is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerARating = PlayerARating;
            }
            // to ensure "PlayerBRating" is required (not null)
            if (PlayerBRating == null)
            {
                throw new InvalidDataException("PlayerBRating is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerBRating = PlayerBRating;
            }
            // to ensure "MatchId" is required (not null)
            if (MatchId == null)
            {
                throw new InvalidDataException("MatchId is a required property for Game and cannot be null");
            }
            else
            {
                this.MatchId = MatchId;
            }
            // to ensure "PlayerA" is required (not null)
            if (PlayerA == null)
            {
                throw new InvalidDataException("PlayerA is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerA = PlayerA;
            }
            // to ensure "PlayerB" is required (not null)
            if (PlayerB == null)
            {
                throw new InvalidDataException("PlayerB is a required property for Game and cannot be null");
            }
            else
            {
                this.PlayerB = PlayerB;
            }
            this.Devision = Devision;
            this.PlayerARatingAdjustment = PlayerARatingAdjustment;
            this.PlayerBRatingAdjustment = PlayerBRatingAdjustment;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets Devision
        /// </summary>
        [DataMember(Name="devision", EmitDefaultValue=false)]
        public string Devision { get; set; }

        /// <summary>
        /// Gets or Sets _Event
        /// </summary>
        [DataMember(Name="event", EmitDefaultValue=false)]
        public string _Event { get; set; }

        /// <summary>
        /// Gets or Sets Round
        /// </summary>
        [DataMember(Name="round", EmitDefaultValue=false)]
        public string Round { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets PlayerAPoints
        /// </summary>
        [DataMember(Name="player_a_points", EmitDefaultValue=false)]
        public int? PlayerAPoints { get; set; }

        /// <summary>
        /// Gets or Sets PlayerBPoints
        /// </summary>
        [DataMember(Name="player_b_points", EmitDefaultValue=false)]
        public int? PlayerBPoints { get; set; }

        /// <summary>
        /// Gets or Sets PlayerAGames
        /// </summary>
        [DataMember(Name="player_a_games", EmitDefaultValue=false)]
        public int? PlayerAGames { get; set; }

        /// <summary>
        /// Gets or Sets PlayerBGames
        /// </summary>
        [DataMember(Name="player_b_games", EmitDefaultValue=false)]
        public int? PlayerBGames { get; set; }

        /// <summary>
        /// Gets or Sets PlayerARating
        /// </summary>
        [DataMember(Name="player_a_rating", EmitDefaultValue=false)]
        public double? PlayerARating { get; set; }

        /// <summary>
        /// Gets or Sets PlayerBRating
        /// </summary>
        [DataMember(Name="player_b_rating", EmitDefaultValue=false)]
        public double? PlayerBRating { get; set; }

        /// <summary>
        /// Gets or Sets PlayerARatingAdjustment
        /// </summary>
        [DataMember(Name="player_a_rating_adjustment", EmitDefaultValue=false)]
        public double? PlayerARatingAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets PlayerBRatingAdjustment
        /// </summary>
        [DataMember(Name="player_b_rating_adjustment", EmitDefaultValue=false)]
        public double? PlayerBRatingAdjustment { get; set; }

        /// <summary>
        /// Gets or Sets MatchId
        /// </summary>
        [DataMember(Name="match_id", EmitDefaultValue=false)]
        public int? MatchId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerA
        /// </summary>
        [DataMember(Name="player_a", EmitDefaultValue=false)]
        public Player PlayerA { get; set; }

        /// <summary>
        /// Gets or Sets PlayerB
        /// </summary>
        [DataMember(Name="player_b", EmitDefaultValue=false)]
        public Player PlayerB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Devision: ").Append(Devision).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  PlayerAPoints: ").Append(PlayerAPoints).Append("\n");
            sb.Append("  PlayerBPoints: ").Append(PlayerBPoints).Append("\n");
            sb.Append("  PlayerAGames: ").Append(PlayerAGames).Append("\n");
            sb.Append("  PlayerBGames: ").Append(PlayerBGames).Append("\n");
            sb.Append("  PlayerARating: ").Append(PlayerARating).Append("\n");
            sb.Append("  PlayerBRating: ").Append(PlayerBRating).Append("\n");
            sb.Append("  PlayerARatingAdjustment: ").Append(PlayerARatingAdjustment).Append("\n");
            sb.Append("  PlayerBRatingAdjustment: ").Append(PlayerBRatingAdjustment).Append("\n");
            sb.Append("  MatchId: ").Append(MatchId).Append("\n");
            sb.Append("  PlayerA: ").Append(PlayerA).Append("\n");
            sb.Append("  PlayerB: ").Append(PlayerB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Game);
        }

        /// <summary>
        /// Returns true if Game instances are equal
        /// </summary>
        /// <param name="input">Instance of Game to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Game input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Devision == input.Devision ||
                    (this.Devision != null &&
                    this.Devision.Equals(input.Devision))
                ) && 
                (
                    this._Event == input._Event ||
                    (this._Event != null &&
                    this._Event.Equals(input._Event))
                ) && 
                (
                    this.Round == input.Round ||
                    (this.Round != null &&
                    this.Round.Equals(input.Round))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.PlayerAPoints == input.PlayerAPoints ||
                    (this.PlayerAPoints != null &&
                    this.PlayerAPoints.Equals(input.PlayerAPoints))
                ) && 
                (
                    this.PlayerBPoints == input.PlayerBPoints ||
                    (this.PlayerBPoints != null &&
                    this.PlayerBPoints.Equals(input.PlayerBPoints))
                ) && 
                (
                    this.PlayerAGames == input.PlayerAGames ||
                    (this.PlayerAGames != null &&
                    this.PlayerAGames.Equals(input.PlayerAGames))
                ) && 
                (
                    this.PlayerBGames == input.PlayerBGames ||
                    (this.PlayerBGames != null &&
                    this.PlayerBGames.Equals(input.PlayerBGames))
                ) && 
                (
                    this.PlayerARating == input.PlayerARating ||
                    (this.PlayerARating != null &&
                    this.PlayerARating.Equals(input.PlayerARating))
                ) && 
                (
                    this.PlayerBRating == input.PlayerBRating ||
                    (this.PlayerBRating != null &&
                    this.PlayerBRating.Equals(input.PlayerBRating))
                ) && 
                (
                    this.PlayerARatingAdjustment == input.PlayerARatingAdjustment ||
                    (this.PlayerARatingAdjustment != null &&
                    this.PlayerARatingAdjustment.Equals(input.PlayerARatingAdjustment))
                ) && 
                (
                    this.PlayerBRatingAdjustment == input.PlayerBRatingAdjustment ||
                    (this.PlayerBRatingAdjustment != null &&
                    this.PlayerBRatingAdjustment.Equals(input.PlayerBRatingAdjustment))
                ) && 
                (
                    this.MatchId == input.MatchId ||
                    (this.MatchId != null &&
                    this.MatchId.Equals(input.MatchId))
                ) && 
                (
                    this.PlayerA == input.PlayerA ||
                    (this.PlayerA != null &&
                    this.PlayerA.Equals(input.PlayerA))
                ) && 
                (
                    this.PlayerB == input.PlayerB ||
                    (this.PlayerB != null &&
                    this.PlayerB.Equals(input.PlayerB))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Devision != null)
                    hashCode = hashCode * 59 + this.Devision.GetHashCode();
                if (this._Event != null)
                    hashCode = hashCode * 59 + this._Event.GetHashCode();
                if (this.Round != null)
                    hashCode = hashCode * 59 + this.Round.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.PlayerAPoints != null)
                    hashCode = hashCode * 59 + this.PlayerAPoints.GetHashCode();
                if (this.PlayerBPoints != null)
                    hashCode = hashCode * 59 + this.PlayerBPoints.GetHashCode();
                if (this.PlayerAGames != null)
                    hashCode = hashCode * 59 + this.PlayerAGames.GetHashCode();
                if (this.PlayerBGames != null)
                    hashCode = hashCode * 59 + this.PlayerBGames.GetHashCode();
                if (this.PlayerARating != null)
                    hashCode = hashCode * 59 + this.PlayerARating.GetHashCode();
                if (this.PlayerBRating != null)
                    hashCode = hashCode * 59 + this.PlayerBRating.GetHashCode();
                if (this.PlayerARatingAdjustment != null)
                    hashCode = hashCode * 59 + this.PlayerARatingAdjustment.GetHashCode();
                if (this.PlayerBRatingAdjustment != null)
                    hashCode = hashCode * 59 + this.PlayerBRatingAdjustment.GetHashCode();
                if (this.MatchId != null)
                    hashCode = hashCode * 59 + this.MatchId.GetHashCode();
                if (this.PlayerA != null)
                    hashCode = hashCode * 59 + this.PlayerA.GetHashCode();
                if (this.PlayerB != null)
                    hashCode = hashCode * 59 + this.PlayerB.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
