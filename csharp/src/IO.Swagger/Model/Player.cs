/* 
 * Sqaush Matrix API
 *
 * v1 documentation
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Player
    /// </summary>
    [DataContract]
    public partial class Player :  IEquatable<Player>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Player() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Rating">Rating (required).</param>
        /// <param name="GamesAsPlayerA">GamesAsPlayerA (required).</param>
        /// <param name="GamesAsPlayerB">GamesAsPlayerB (required).</param>
        /// <param name="Clubs">Clubs (required).</param>
        public Player(long? Id = default(long?), string Name = default(string), int? Rating = default(int?), List<Game> GamesAsPlayerA = default(List<Game>), List<Game> GamesAsPlayerB = default(List<Game>), List<Club> Clubs = default(List<Club>))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for Player and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Player and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Rating" is required (not null)
            if (Rating == null)
            {
                throw new InvalidDataException("Rating is a required property for Player and cannot be null");
            }
            else
            {
                this.Rating = Rating;
            }
            // to ensure "GamesAsPlayerA" is required (not null)
            if (GamesAsPlayerA == null)
            {
                throw new InvalidDataException("GamesAsPlayerA is a required property for Player and cannot be null");
            }
            else
            {
                this.GamesAsPlayerA = GamesAsPlayerA;
            }
            // to ensure "GamesAsPlayerB" is required (not null)
            if (GamesAsPlayerB == null)
            {
                throw new InvalidDataException("GamesAsPlayerB is a required property for Player and cannot be null");
            }
            else
            {
                this.GamesAsPlayerB = GamesAsPlayerB;
            }
            // to ensure "Clubs" is required (not null)
            if (Clubs == null)
            {
                throw new InvalidDataException("Clubs is a required property for Player and cannot be null");
            }
            else
            {
                this.Clubs = Clubs;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public int? Rating { get; set; }

        /// <summary>
        /// Gets or Sets GamesAsPlayerA
        /// </summary>
        [DataMember(Name="games_as_player_a", EmitDefaultValue=false)]
        public List<Game> GamesAsPlayerA { get; set; }

        /// <summary>
        /// Gets or Sets GamesAsPlayerB
        /// </summary>
        [DataMember(Name="games_as_player_b", EmitDefaultValue=false)]
        public List<Game> GamesAsPlayerB { get; set; }

        /// <summary>
        /// Gets or Sets Clubs
        /// </summary>
        [DataMember(Name="clubs", EmitDefaultValue=false)]
        public List<Club> Clubs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Player {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  GamesAsPlayerA: ").Append(GamesAsPlayerA).Append("\n");
            sb.Append("  GamesAsPlayerB: ").Append(GamesAsPlayerB).Append("\n");
            sb.Append("  Clubs: ").Append(Clubs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Player);
        }

        /// <summary>
        /// Returns true if Player instances are equal
        /// </summary>
        /// <param name="input">Instance of Player to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Player input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.GamesAsPlayerA == input.GamesAsPlayerA ||
                    this.GamesAsPlayerA != null &&
                    this.GamesAsPlayerA.SequenceEqual(input.GamesAsPlayerA)
                ) && 
                (
                    this.GamesAsPlayerB == input.GamesAsPlayerB ||
                    this.GamesAsPlayerB != null &&
                    this.GamesAsPlayerB.SequenceEqual(input.GamesAsPlayerB)
                ) && 
                (
                    this.Clubs == input.Clubs ||
                    this.Clubs != null &&
                    this.Clubs.SequenceEqual(input.Clubs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.GamesAsPlayerA != null)
                    hashCode = hashCode * 59 + this.GamesAsPlayerA.GetHashCode();
                if (this.GamesAsPlayerB != null)
                    hashCode = hashCode * 59 + this.GamesAsPlayerB.GetHashCode();
                if (this.Clubs != null)
                    hashCode = hashCode * 59 + this.Clubs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
